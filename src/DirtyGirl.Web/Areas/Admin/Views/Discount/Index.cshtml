@model vmAdmin_CouponList
@{
    ViewBag.Title = "Index";
}

 <div>
    <div style="position: relative; overflow: auto;">
        <fieldset>
            <legend>Coupon Management</legend>

            @using (Html.BeginForm("Index", "Discount", new {eventId = @Model.SelectedEventId},FormMethod.Get, null))
            {
                @(Html.Kendo().DropDownListFor(x => x.SelectedEventId)      
                    .Name("ddlSelectedEvent")              
                    .OptionLabel("Select Event")
                    .DataTextField("Location")
                    .DataValueField("EventId")
                    .BindTo(Model.EventList)
                    .Events(events => events.Change("onEventChange"))
                 )
                
                 @Html.TextBox("SearchCoupons", null, new { @class = "k-textbox seach-field", @placeholder = "Search Coupon Code" })
                 <input type="button" id="search-button" class="k-button" value="Search" />
            }

            <br />
            @(Html.Kendo().Grid<Coupon>()
                .Name("grdCoupons")
                .ToolBar(commands => commands.Create().Text("Add New Coupon"))
                .Pageable()
                .Columns(cols =>
                {
                    cols.ForeignKey(x => x.CouponType, Model.CouponTypeList, "value", "text");
                    cols.Bound(x => x.Code);  
                    cols.Bound(x => x.Value);
                    cols.ForeignKey(x => x.DiscountType, Model.DiscountTypeList, "value", "text").Title("Discount");                                      
                    cols.Bound(x => x.IsActive).Title("Active");
                    cols.Bound(x => x.IsReusable).Title("Reusable");
                    cols.Bound(x => x.StartDateTime).Title("Start Date");
                    cols.Bound(x => x.EndDateTime).Title("End Date");
                    cols.Bound(x => x.MaxRegistrantCount).Title("Max Registrations");                    
                    cols.Bound(x => x.Description);
                    cols.Bound(x => x.EventId).Visible(false);
                    cols.Command(command => { command.Edit(); command.Destroy(); }).Width(160);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                .DataSource(datasource => datasource
                    .Ajax()
                    .PageSize(30)
                    .Events(events => events.Error("error_handler"))
                    .Events(events => events.RequestEnd("onRequestEnd"))
                    .Model(model => model.Id("DiscountItemId"))
                    .Read(read => read.Action("Ajax_GetCoupons", "Discount").Data("getSelectedEvent"))
                    .Create(add => add.Action("Ajax_CreateCoupon", "Discount").Data("getSelectedEvent"))
                    .Update(save => save.Action("Ajax_UpdateCoupon", "Discount").Data("getSelectedEvent"))
                    .Destroy(delete => delete.Action("Ajax_DeleteCoupon", "Discount"))
                ).HtmlAttributes(new { style = "font-size:12px;" })
            )

        </fieldset>
    </div>
</div>

<script type="text/kendo-template" id="message">
    <div class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" style="margin: 0.5em; display: block; " data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
        <span class="k-icon k-warning"> </span>#=message#<div class="k-callout k-callout-n"></div>
    </div>
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#search-button").on('click', function () {
            var grid = $("#grdCoupons").data("kendoGrid");
            grid.dataSource.read();
        });

    });

    var validationMessageTmpl = kendo.template($("#message").html());

    function error_handler(args) {
        if (args.errors) {
            var dataSource = this,
                grid = $.grep($("[data-role=grid]"), function (element) {
                    return $(element).data("kendoGrid").dataSource === dataSource;
                })[0];

            grid = $(grid).data("kendoGrid");

            grid.one("dataBinding", function (e) {
                e.preventDefault();   // cancel grid rebind if error occurs                             

                for (var error in args.errors) {
                    showMessage(grid.editable.element, error, args.errors[error].errors);
                }
            });
        }
    }

    function showMessage(container, name, errors) {
        //add the validation message to the form
        container.find("[data-valmsg-for=" + name + "]")
            .replaceWith($(validationMessageTmpl({ field: name, message: errors[0] })));
    }

    function onEventChange() {
        var grid = $("#grdCoupons").data("kendoGrid");
        grid.dataSource.read();
    }

    function getSelectedEvent() {
        var currentValue = $("#ddlSelectedEvent").data("kendoDropDownList").value();
        var searchTerm = $("#SearchCoupons").val(); 
        return { masterEventId: currentValue, search: searchTerm };
    }

    function onRequestEnd(e) {
        if (e.type == "read") {
            var offsetMiliseconds = new Date().getTimezoneOffset() * 60000;
            var coupons = e.response.Data;
            for (var i = 0; i < coupons.length; i++) {
                if (coupons[i].StartDateTime != null) {
                    coupons[i].StartDateTime = coupons[i].StartDateTime.replace(/\d+/,
                        function (n) { return parseInt(n) + offsetMiliseconds }
                     );
                }
                if (coupons[i].EndDateTime != null) {
                    coupons[i].EndDateTime = coupons[i].EndDateTime.replace(/\d+/,
                        function (n) { return parseInt(n) + offsetMiliseconds }
                     );
                }
            }
        }
    }

</script>

